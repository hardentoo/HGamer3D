// A really basic ambient pass program, support for one texture coodinate set
vertex_program Basic/VertexPrograms/AmbientOneTexture cg
{
	source Basic.cg
	entry_point ambientOneTexture_vp
	profiles vs_1_1 arbvp1

	default_params
	{
		param_named_auto worldViewProj worldviewproj_matrix
		param_named_auto ambient ambient_light_colour
	}
	
}


//------------------------
// Bump mapping section
//------------------------

// Bump map vertex program, support for this is required
vertex_program BumpMapping/VertexPrograms/BumpMapVP cg
{
	source BumpMapping.cg
	entry_point main_vp
	profiles vs_1_1 arbvp1
}

// Bump map vertex program, with tangent parity support for this is required
vertex_program BumpMapping/VertexPrograms/BumpMapVPTangentParity cg
{
	source BumpMapping.cg
	entry_point main_vp
	profiles vs_1_1 arbvp1
	compile_arguments -DTANGENTS_HAVE_PARITY=1
}

// Bump map fragment program, support for this is optional
fragment_program BumpMapping/FragmentPrograms/BumpMapFP cg
{
	source BumpMapping.cg
	entry_point main_fp
	profiles ps_2_0 arbfp1 fp20
}

// Bump map vertex program shadow receiver
vertex_program BumpMapping/VertexPrograms/BumpMapVPShadowRcv cg
{
	source BumpMapping.cg
	entry_point main_shadowreceiver_vp
	profiles vs_1_1 arbvp1
}
// Bump map fragment program shadow receiver, support for this is optional
fragment_program BumpMapping/FragmentPrograms/BumpMapFPShadowRcv cg
{
	source BumpMapping.cg
	entry_point main_shadowreceiver_fp
	profiles ps_2_0 arbfp1 fp20
}


// Bump map with specular vertex program, support for this is required
vertex_program BumpMapping/VertexPrograms/BumpMapVPSpecular cg
{
	source BumpMapping.cg
	entry_point specular_vp
	profiles vs_1_1 arbvp1
}

// Bump map fragment program, support for this is optional
fragment_program BumpMapping/FragmentPrograms/BumpMapFPSpecular cg
{
	source BumpMapping.cg
	entry_point specular_fp
	profiles ps_2_0 arbfp1 fp20
}


// Any number of lights, diffuse
material BumpMapping/MultiLight
{

	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{
		// Base ambient pass
		pass ambient
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 1 1 1
			diffuse 0 0 0 
			specular 0 0 0 0 
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Basic/VertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto ambient ambient_light_colour
			}
			
		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass perlight
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0 
			
			// do this for each light
			iteration once_per_light

		
			scene_blend add

			// Vertex program reference
			vertex_program_ref BumpMapping/VertexPrograms/BumpMapVP
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Fragment program
			fragment_program_ref BumpMapping/FragmentPrograms/BumpMapFP
			{
				param_named_auto lightDiffuse light_diffuse_colour 0 
			}

			// texture shadow receiver program
			shadow_receiver_vertex_program_ref BumpMapping/VertexPrograms/BumpMapVPShadowRcv
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto worldMatrix world_matrix
				param_named_auto texViewProj texture_viewproj_matrix
			}
			// Additive texture shadow receiver program
			shadow_receiver_fragment_program_ref BumpMapping/FragmentPrograms/BumpMapFPShadowRcv
			{
				param_named_auto lightDiffuse light_diffuse_colour 0 
			}
			
			// Base bump map
			texture_unit normalmap
			{
				texture NMBumpsOut.png
				colour_op replace
			}
		}
		
		// Decal pass
		pass decal
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			lighting off
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Basic/VertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named ambient float4 1 1 1 1
			}
			scene_blend dest_colour zero
			texture_unit decalmap
			{
				texture RustedMetal.jpg 
			}
			
		}
	}


}

// Any number of lights, diffuse and specular
material BumpMapping/MultiLightSpecular : BumpMapping/MultiLight
{

	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{
		// Overlay nothing new onto the old ambient pass
		pass ambient
		{
		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass perlight
		{

			// Vertex program reference
			vertex_program_ref BumpMapping/VertexPrograms/BumpMapVPSpecular
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto eyePosition camera_position_object_space
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Fragment program
			fragment_program_ref BumpMapping/FragmentPrograms/BumpMapFPSpecular
			{
				param_named_auto lightDiffuse light_diffuse_colour 0 
				param_named_auto lightSpecular light_specular_colour 0
			}
			
		}
		
	}

}

// Any number of lights, diffuse only, correct for tangent parity
material BumpMapping/MultiLightTangentParity : BumpMapping/MultiLight
{

	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{
		// Overlay nothing new onto the old ambient pass
		pass ambient
		{
		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass perlight
		{

			// Just change the vertex program
			vertex_program_ref BumpMapping/VertexPrograms/BumpMapVPTangentParity
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
			}

			
		}
		
	}

}



// now different materials with different textures


material "BumpMapping/RustedMetal" : BumpMapping/MultiLight
{
	technique
	{
		pass perlight
		{
			texture_unit normalmap
			{
				texture NMBumpsOut.png
				colour_op replace
			}
		}
		pass decal
		{
			texture_unit decalmap
			{
				texture RustedMetal.jpg
			}
		}
	}
}

material BumpMapping/Rockwall : BumpMapping/MultiLight
{
	technique
	{
		pass perlight
		{
			texture_unit normalmap
			{
				texture rockwall_NH.tga
				colour_op replace
			}
		}
		pass decal
		{
			texture_unit decalmap
			{
				texture rockwall.tga
			}
		}
	}
}

material Texture/Rockwall
{
	technique
	{
	   pass
	   {
		texture_unit
		{
			texture rockwall.tga
		}
	   }
	}
}

